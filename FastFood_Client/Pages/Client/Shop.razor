@page "/shop"
@using Data.Models.CategoryModels
@using Data.Models.ProductModels
@using FastFood_Client.HttpRepositories.Interfaces
@inject IHttpProductService HttpProductService
@inject IHttpCategoryService HttpCategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

<PageTitle>Sản Phẩm</PageTitle>

<!-- Breadcrumb Begin -->
<div class="breadcrumb-option">
    <div class="container">
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-6">
                <div class="breadcrumb__text">
                    <h2>Sản Phẩm</h2>
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6">
                <div class="breadcrumb__links">
                    <a href="/">Trang Chủ</a>
                    <span>Sản Phẩm</span>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Breadcrumb End -->
<!-- Shop Section Begin -->
<section class="shop spad">
    <div class="container">
        <div class="shop__option">
            <div class="row">
                <div class="col-lg-6 col-md-6">
                    <div class="shop__option__search">
                        <form @onsubmit="SearchProducts">
                            <input type="text" placeholder="Từ khóa sản phẩm..." @bind-value="SearchKeyword" />
                            <button @onclick=SearchProducts type="submit"><i class="fa fa-search"></i></button>
                        </form>
                    </div>
                </div>
                <div class="col-lg-4 col-md-4">
                    <div class="shop__option__right option1">
                        <select @onchange="SortProducts">
                            <option value="">Sắp xếp theo</option>
                            <option value="asc">Tên (A-Z)</option>
                            <option value="desc">Tên (Z-A)</option>
                            <option value="price-asc">Giá (Thấp đến Cao)</option>
                            <option value="price-desc">Giá (Cao đến Thấp)</option>
                        </select>
                    </div>
                </div>
                <div class="col-lg-2 col-md-2">
                    <div class="shop__option__right">
                        <select @onchange="FilterByCategory">
                            <option value="">Loại sản phẩm</option>
                            @if (Categories != null)
                            {
                                @foreach (var category in Categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            }
                            else
                            {
                                <option value="">Không có loại sản phẩm</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            @if (Products != null)
            {
                @foreach (var product in Products)
                {
                    <div class="col-lg-3 col-md-6 col-sm-6">
                        <div class="product__item">
                            <div class="product__item__pic set-bg">
                                <a href="@($"ProductDetails/{product.Id}")">
                                    <img src="/client/img/shop/@product.Image" />
                                </a>

                                <div class="product__label">
                                    <span>@product.CategoryName</span>
                                </div>
                            </div>
                            <div class="product__item__text">
                                <h6><a href="@($"ProductDetails/{product.Id}")">@product.ProductName</a></h6>
                                <div class="product__item__price">$@product.Price.ToString("0.00")</div>
                                <div class="cart_add">
                                    <a href="#" @onclick="@(() => AddToCart(product.Id))">Thêm vào giỏ</a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12 text-center">
                    <p>Đang tải dữ liệu sản phẩm...</p>
                </div>
            }

        </div>
        <div class="shop__last__option">
            <div class="row">
                <div class="col-lg-6 col-md-6 col-sm-6">
                    <div class="shop__pagination">
                        <a href="#">1</a>
                        <a href="#">2</a>
                        <a href="#">3</a>
                        <a href="#"><span class="arrow_carrot-right"></span></a>
                    </div>
                </div>
                <div class="col-lg-6 col-md-6 col-sm-6">
                    <div class="shop__last__text">
                        <p>Showing 1-9 of 10 results</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- Shop Section End -->
@code {
    private IEnumerable<ProductForView> Products { get; set; }
    private IEnumerable<CategoryForView> Categories { get; set; }
    private string SearchKeyword { get; set; } = "";
    private string SortOption { get; set; } = "";
    private Guid? SelectedCategory { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Products = await HttpProductService.GetAllProductsAsync();
        FilteredProducts = Products;
        Categories = await HttpCategoryService.GetAllCategory();
        Products = await HttpProductService.GetAllProductsAsync();
        Categories = await HttpCategoryService.GetAllCategoriesAsync();
    }

    private async Task SearchProducts()
    {
        Products = await HttpProductService.GetProductsAsync(SearchKeyword, SortOption, SelectedCategory);

        // Tạo URL mới dựa trên tham số tìm kiếm, sắp xếp, lọc
        var newUrl = NavigationManager.Uri;
        if (!string.IsNullOrEmpty(SearchKeyword))
        {
            newUrl += $"?keyword={SearchKeyword}";
        }
        if (!string.IsNullOrEmpty(SortOption))
        {
            newUrl += $"&sortOption={SortOption}";
        }
        if (SelectedCategory.HasValue)
        {
            newUrl += $"&categoryId={SelectedCategory}";
        }

        // Điều hướng đến URL mới
        NavigationManager.NavigateTo(newUrl);
    }

    private void SortProducts(ChangeEventArgs e)
    {
        SortOption = e.Value.ToString();
        // Gọi lại SearchProducts để cập nhật UI và điều hướng
        SearchProducts();
    }

    private void FilterByCategory(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value.ToString(), out var categoryId))
        {
            SelectedCategory = categoryId;
        }
        else
        {
            SelectedCategory = null;
        }
        // Gọi lại SearchProducts để cập nhật UI và điều hướng
        SearchProducts();
    }

    private async Task AddToCart(Guid productId)
    {
        // 1. Lấy thông tin sản phẩm từ API
        var product = await HttpProductService.GetProductByIdAsync(productId);

        // 2. Lưu thông tin sản phẩm vào session storage
        var cartItems = await GetCartItemsFromSession();
        cartItems.Add(new ProductForView
            {
                Id = product.Id,
                ProductName = product.ProductName,
                Price = product.Price,
                Image = product.Image,
                Quantity = 1, // Mặc định là 1
                CategoryName = product.CategoryName
            });
        await SaveCartItemsToSession(cartItems);

        // 3. Chuyển hướng đến trang giỏ hàng
        NavigationManager.NavigateTo($"/cart?productId={productId}");
    }

    private async Task<List<ProductForView>> GetCartItemsFromSession()
    {
        var cartItemsJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "cart");
        if (!string.IsNullOrEmpty(cartItemsJson))
        {
            return System.Text.Json.JsonSerializer.Deserialize<List<ProductForView>>(cartItemsJson);
        }
        return new List<ProductForView>();
    }

    private async Task SaveCartItemsToSession(List<ProductForView> cartItems)
    {
        var cartItemsJson = System.Text.Json.JsonSerializer.Serialize(cartItems);
        await jsRuntime.InvokeVoidAsync("sessionStorage.setItem", "cart", cartItemsJson);
    }
}
